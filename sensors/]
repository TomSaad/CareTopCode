# deal with gpio here; need 5 sensor lines, power ground can be shared.

import sys
import RPi.GPIO as GPIO
import Adafruit_DHT
import smbus
import time

###GPIO SETUP
GPIO.setwarnings(False)

#Use the BCM numbers not the direct pin numbers
GPIO.setmode(GPIO.BCM)

# Assigned pins going down left side of breakout
HUMTMP_1_PIN = 4
HUMTMP_2_PIN = 17
HUMTMP_3_PIN = 27
HUMTMP_4_PIN = 22
HUMTMP_5_PIN = 5

#I2C setup
bus = smbus.SMBus(1)
UVB_I2C_ADDR = 0x10

GPIO.setup(UVB_I2C_ADDR, GPIO.OUT)
GPIO.setup(HUMTMP_1_PIN, GPIO.OUT)
GPIO.setup(HUMTMP_2_PIN, GPIO.OUT)
GPIO.setup(HUMTMP_3_PIN, GPIO.OUT)
GPIO.setup(HUMTMP_4_PIN, GPIO.OUT)
GPIO.setup(HUMTMP_5_PIN, GPIO.OUT)

uvsensors[UVB_5_I2C_ADDR]
uvb = [] * len(uvsensors)

htsensors = [] * 5
htsensors[0] = HUMTMP_1_PIN
htsensors[1] = HUMTMP_2_PIN
htsensors[2] = HUMTMP_3_PIN
htsensors[4] = HUMTMP_4_PIN
htsensors[5] = HUMTMP_5_PIN
humtemp = [] * len(htsensors)


def read(pin):
    """
        takes in pin for sensor desired to read
        returns tuple of (humidity, temperature), using DHT library read function
    """
    # read_retry from DHT library attempts to read until valid tuple of (humidity, temperature) is returned.
    # if failed to do so in certain number of tries or time, returns (None, None).
    # read_retry arguments:
    # read_retry(sensor, pin, retries=15, delay_seconds=2, platform=None)
    # we use DHT11, so sensor is always 11
    return Adafruit_DHT.read_retry(11, pin)

def readHumidity(pin):
    """
        takes in pin for sensor desired to read
        returns humidity value (first of tuple (humidity, temperature))
    """
    return Adafruit_DHT.read_retry(11, pin)[0]

def readTemperature(pin):
    """
        takes in pin for sensor desired to read
        returns temperature value (second of tuple (humidity, temperature))
    """
    return Adafruit_DHT.read_retry(11, pin)[1]

def readUVB(addr):
	"""
		takes pin for uvb sensor to read
		uvb uses i2c protocol
	"""
	bus.read_byte_data(addr, 1)

def readAll():
    for hts in range(len(htsensors)):
        humtemp[hts] = read(htsensors[hts])  # pass in pin of sensor

    for uvbs in range(len(uvsensors)):
        uvb[uvbs] = readUVB(uvsensors[uvbs])  # pass in pin of sensor


def avgHum():
    readAll()
    avg = 0
    for value in range(len(humtemp)):
        avg = avg + humtemp[value][0] #just humidity here
    return avg/len(humtemp)

def avgTemp():
    readAll()
    avg = 0
    for value in range(len(humtemp)):
        avg = avg + humtemp[value][1] #just temperature here
    return avg/len(humtemp)

def main():
	while True:
		hum1, temp1 = read(HUMTMP_1_PIN)
		hum2, temp2 = read(HUMTMP_2_PIN)
		hum3, temp3 = read(HUMTMP_3_PIN)
		hum4, temp4 = read(HUMTMP_4_PIN)
		hum5, temp5 = read(HUMTMP_5_PIN)

		print(""
				+ "\n h1= {0:0.1f} %  t1= {1:0.1f} C"
				+ "\t h2= {2:0.1f} %  t2= {3:0.1f} C"
				+ "\t h3= {4:0.1f} %  t3= {5:0.1f} C"
				+ "\t h4= {6:0.1f} %  t4= {7:0.1f} C"
				+ "\t h5= {8:0.1f} %  t5= {9:0.1f} C"
			+ "").format(
				hum1, temp1
				, hum2, temp2
				, hum3, temp3
				, hum4, temp4
				, hum5, temp5
		     )

		avgh = avgHum()
		avgt = avgTemp()
		print(""
				+ "\n avg hum: {0:0.1f}%  avg tmp: {1:0.1f} C"
			+ "").format(avgh, avgt)

if __name__ == "__main__":
	main()
